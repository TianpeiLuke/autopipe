{
  "script_name": "currency_conversion",
  "level1": {
    "passed": false,
    "issues": [
      {
        "severity": "WARNING",
        "category": "logical_names",
        "message": "Script uses logical name not in contract: data",
        "details": {
          "logical_name": "data",
          "script": "currency_conversion"
        },
        "recommendation": "Add logical name data to contract or update script"
      },
      {
        "severity": "ERROR",
        "category": "arguments",
        "message": "Contract declares argument not defined in script: skip-invalid-currencies",
        "details": {
          "argument": "skip-invalid-currencies",
          "script": "currency_conversion"
        },
        "recommendation": "Add argument parser for skip-invalid-currencies in script"
      },
      {
        "severity": "ERROR",
        "category": "arguments",
        "message": "Contract declares argument not defined in script: enable-conversion",
        "details": {
          "argument": "enable-conversion",
          "script": "currency_conversion"
        },
        "recommendation": "Add argument parser for enable-conversion in script"
      },
      {
        "severity": "ERROR",
        "category": "arguments",
        "message": "Contract declares argument not defined in script: job-type",
        "details": {
          "argument": "job-type",
          "script": "currency_conversion"
        },
        "recommendation": "Add argument parser for job-type in script"
      },
      {
        "severity": "ERROR",
        "category": "arguments",
        "message": "Contract declares argument not defined in script: n-workers",
        "details": {
          "argument": "n-workers",
          "script": "currency_conversion"
        },
        "recommendation": "Add argument parser for n-workers in script"
      },
      {
        "severity": "ERROR",
        "category": "arguments",
        "message": "Contract declares argument not defined in script: default-currency",
        "details": {
          "argument": "default-currency",
          "script": "currency_conversion"
        },
        "recommendation": "Add argument parser for default-currency in script"
      },
      {
        "severity": "ERROR",
        "category": "arguments",
        "message": "Contract declares argument not defined in script: marketplace-id-col",
        "details": {
          "argument": "marketplace-id-col",
          "script": "currency_conversion"
        },
        "recommendation": "Add argument parser for marketplace-id-col in script"
      },
      {
        "severity": "ERROR",
        "category": "arguments",
        "message": "Contract declares argument not defined in script: currency-col",
        "details": {
          "argument": "currency-col",
          "script": "currency_conversion"
        },
        "recommendation": "Add argument parser for currency-col in script"
      },
      {
        "severity": "WARNING",
        "category": "arguments",
        "message": "Script defines argument not in contract: default_currency",
        "details": {
          "argument": "default_currency",
          "script": "currency_conversion"
        },
        "recommendation": "Add default_currency to contract arguments or remove from script"
      },
      {
        "severity": "WARNING",
        "category": "arguments",
        "message": "Script defines argument not in contract: n_workers",
        "details": {
          "argument": "n_workers",
          "script": "currency_conversion"
        },
        "recommendation": "Add n_workers to contract arguments or remove from script"
      },
      {
        "severity": "WARNING",
        "category": "arguments",
        "message": "Script defines argument not in contract: currency_col",
        "details": {
          "argument": "currency_col",
          "script": "currency_conversion"
        },
        "recommendation": "Add currency_col to contract arguments or remove from script"
      },
      {
        "severity": "WARNING",
        "category": "arguments",
        "message": "Script defines argument not in contract: job_type",
        "details": {
          "argument": "job_type",
          "script": "currency_conversion"
        },
        "recommendation": "Add job_type to contract arguments or remove from script"
      },
      {
        "severity": "WARNING",
        "category": "arguments",
        "message": "Script defines argument not in contract: skip_invalid_currencies",
        "details": {
          "argument": "skip_invalid_currencies",
          "script": "currency_conversion"
        },
        "recommendation": "Add skip_invalid_currencies to contract arguments or remove from script"
      },
      {
        "severity": "WARNING",
        "category": "arguments",
        "message": "Script defines argument not in contract: train_ratio",
        "details": {
          "argument": "train_ratio",
          "script": "currency_conversion"
        },
        "recommendation": "Add train_ratio to contract arguments or remove from script"
      },
      {
        "severity": "WARNING",
        "category": "arguments",
        "message": "Script defines argument not in contract: test_val_ratio",
        "details": {
          "argument": "test_val_ratio",
          "script": "currency_conversion"
        },
        "recommendation": "Add test_val_ratio to contract arguments or remove from script"
      },
      {
        "severity": "WARNING",
        "category": "arguments",
        "message": "Script defines argument not in contract: enable_conversion",
        "details": {
          "argument": "enable_conversion",
          "script": "currency_conversion"
        },
        "recommendation": "Add enable_conversion to contract arguments or remove from script"
      },
      {
        "severity": "WARNING",
        "category": "arguments",
        "message": "Script defines argument not in contract: marketplace_id_col",
        "details": {
          "argument": "marketplace_id_col",
          "script": "currency_conversion"
        },
        "recommendation": "Add marketplace_id_col to contract arguments or remove from script"
      },
      {
        "severity": "INFO",
        "category": "file_operations",
        "message": "Contract declares input not read by script: /opt/ml/processing/input/data",
        "details": {
          "path": "/opt/ml/processing/input/data",
          "operation": "read",
          "script": "currency_conversion"
        },
        "recommendation": "Either read /opt/ml/processing/input/data in script or remove from contract inputs"
      },
      {
        "severity": "WARNING",
        "category": "file_operations",
        "message": "Contract declares output not written by script: /opt/ml/processing/output",
        "details": {
          "path": "/opt/ml/processing/output",
          "operation": "write",
          "script": "currency_conversion"
        },
        "recommendation": "Either write to /opt/ml/processing/output in script or remove from contract outputs"
      }
    ],
    "script_analysis": {
      "script_path": "/Users/tianpeixie/github_workspace/cursus/src/cursus/steps/scripts/currency_conversion.py",
      "path_references": [
        "path='Get currency code for a given marketplace ID.' line_number=23 context='    default_currency: str\\n) -> str:\\n>>>     \"\"\"Get currency code for a given marketplace ID.\"\"\"\\n    try:\\n        if pd.isna(marketplace_id) or str(int(marketplace_id)) not in marketplace_info:' is_hardcoded=True construction_method=None",
        "path='Combine currency codes from marketplace ID and existing currency column.' line_number=40 context='    skip_invalid_currencies: bool\\n) -> Tuple[pd.DataFrame, str]:\\n>>>     \"\"\"Combine currency codes from marketplace ID and existing currency column.\"\"\"\\n    df[\"currency_code_from_marketplace_id\"] = df[marketplace_id_col].apply(\\n        lambda x: get_currency_code(x, marketplace_info, default_currency)' is_hardcoded=True construction_method=None",
        "path=\"Convert single variable's currency values.\" line_number=64 context='    args: Tuple[pd.DataFrame, str, pd.Series]\\n) -> pd.Series:\\n>>>     \"\"\"Convert single variable\\'s currency values.\"\"\"\\n    df, variable, exchange_rate_series = args\\n    return df[variable] / exchange_rate_series.values' is_hardcoded=True construction_method=None",
        "path='Perform parallel currency conversion on multiple variables.' line_number=76 context='    n_workers: int = 50\\n) -> pd.DataFrame:\\n>>>     \"\"\"Perform parallel currency conversion on multiple variables.\"\"\"\\n    exchange_rate_series = df[currency_col].apply(lambda x: currency_conversion_dict.get(x, 1.0))\\n    processes = min(cpu_count(), len(currency_conversion_vars), n_workers)' is_hardcoded=True construction_method=None",
        "path='Process currency conversion.' line_number=101 context='    n_workers: int = 50\\n) -> pd.DataFrame:\\n>>>     \"\"\"Process currency conversion.\"\"\"\\n    # Drop rows with missing marketplace IDs\\n    df = df.dropna(subset=[marketplace_id_col]).reset_index(drop=True)' is_hardcoded=True construction_method=None",
        "path='\\n    Main function to execute the currency conversion logic.\\n    Refactored for improved testability.\\n    ' line_number=137 context='\\ndef main(args: argparse.Namespace, currency_vars: List[str], currency_dict: Dict[str, float], marketplace_info: Dict[str, Any]):\\n>>>     \"\"\"\\n    Main function to execute the currency conversion logic.\\n    Refactored for improved testability.' is_hardcoded=True construction_method=None",
        "path='/opt/ml/processing/input/data' line_number=143 context='    job_type = args.job_type\\n    mode = args.mode\\n>>>     input_base = Path(\"/opt/ml/processing/input/data\")\\n    output_base = Path(\"/opt/ml/processing/output\")\\n    output_base.mkdir(parents=True, exist_ok=True)' is_hardcoded=True construction_method=None",
        "path='/opt/ml/processing/output' line_number=144 context='    mode = args.mode\\n    input_base = Path(\"/opt/ml/processing/input/data\")\\n>>>     output_base = Path(\"/opt/ml/processing/output\")\\n    output_base.mkdir(parents=True, exist_ok=True)\\n    ' is_hardcoded=True construction_method=None",
        "path='_processed_data.csv' line_number=171 context='        dfs = []\\n        for sp in splits:\\n>>>             fpath = input_base / sp / f\"{sp}_processed_data.csv\"\\n            logger.info(f\"  Reading split {sp} from {fpath}\")\\n            dfs.append(pd.read_csv(fpath))' is_hardcoded=True construction_method=None",
        "path='_processed_data.csv' line_number=197 context='            # processed\\n            proc = split_df.copy()\\n>>>             proc_path = out_dir / f\"{split_name}_processed_data.csv\"\\n            proc.to_csv(proc_path, index=False)\\n            logger.info(f\"Wrote converted processed: {proc_path} (shape={proc.shape})\")' is_hardcoded=True construction_method=None",
        "path='_full_data.csv' line_number=203 context='            # full (just alias here\u2014but you could re-read your full_data.csv if needed)\\n            full = proc.copy()\\n>>>             full_path = out_dir / f\"{split_name}_full_data.csv\"\\n            full.to_csv(full_path, index=False)\\n            logger.info(f\"Wrote converted full: {full_path} (shape={full.shape})\")' is_hardcoded=True construction_method=None",
        "path='_processed_data.csv' line_number=216 context='        for sp in splits:\\n            in_dir = input_base / sp\\n>>>             proc_in_path = in_dir / f\"{sp}_processed_data.csv\"\\n            full_in_path = in_dir / f\"{sp}_full_data.csv\"\\n' is_hardcoded=True construction_method=None",
        "path='_full_data.csv' line_number=217 context='            in_dir = input_base / sp\\n            proc_in_path = in_dir / f\"{sp}_processed_data.csv\"\\n>>>             full_in_path = in_dir / f\"{sp}_full_data.csv\"\\n\\n            df_proc = pd.read_csv(proc_in_path)' is_hardcoded=True construction_method=None",
        "path='_processed_data.csv' line_number=226 context='\\n            # write processed\\n>>>             proc_out = out_dir / f\"{sp}_processed_data.csv\"\\n            df_conv.to_csv(proc_out, index=False)\\n            logger.info(f\"Converted processed for \\'{sp}\\' \u2192 {proc_out} (shape={df_conv.shape})\")' is_hardcoded=True construction_method=None",
        "path='_full_data.csv' line_number=234 context='                df_full = pd.read_csv(full_in_path)\\n                df_full_conv = apply_conversion(df_full)\\n>>>                 full_out = out_dir / f\"{sp}_full_data.csv\"\\n                df_full_conv.to_csv(full_out, index=False)\\n                logger.info(f\"Converted full for \\'{sp}\\' \u2192 {full_out} (shape={df_full_conv.shape})\")' is_hardcoded=True construction_method=None",
        "path='Currency conversion step complete.' line_number=238 context='                logger.info(f\"Converted full for \\'{sp}\\' \u2192 {full_out} (shape={df_full_conv.shape})\")\\n\\n>>>     logger.info(\"Currency conversion step complete.\")\\n\\n' is_hardcoded=True construction_method=None"
      ],
      "env_var_accesses": [
        "variable_name='LABEL_FIELD' line_number=182 context='            train_size=args.train_ratio,\\n            random_state=42,\\n>>>             stratify=df_conv[os.environ[\"LABEL_FIELD\"]]\\n        )\\n        test_df, val_df = train_test_split(' access_method='os.environ' has_default=False default_value=None",
        "variable_name='LABEL_FIELD' line_number=188 context='            test_size=args.test_val_ratio,\\n            random_state=42,\\n>>>             stratify=holdout_df[os.environ[\"LABEL_FIELD\"]]\\n        )\\n' access_method='os.environ' has_default=False default_value=None",
        "variable_name='TRAIN_RATIO' line_number=260 context='        )\\n    )\\n>>>     parser.add_argument(\"--train-ratio\", type=float, default=float(os.environ.get(\"TRAIN_RATIO\", 0.7)))\\n    parser.add_argument(\"--test-val-ratio\", type=float, default=float(os.environ.get(\"TEST_VAL_RATIO\", 0.5)))\\n    parser.add_argument(\"--n-workers\", type=int, default=50)' access_method='os.environ.get' has_default=True default_value=None",
        "variable_name='TEST_VAL_RATIO' line_number=261 context='    )\\n    parser.add_argument(\"--train-ratio\", type=float, default=float(os.environ.get(\"TRAIN_RATIO\", 0.7)))\\n>>>     parser.add_argument(\"--test-val-ratio\", type=float, default=float(os.environ.get(\"TEST_VAL_RATIO\", 0.5)))\\n    parser.add_argument(\"--n-workers\", type=int, default=50)\\n    parser.add_argument(\"--marketplace-id-col\", required=True)' access_method='os.environ.get' has_default=True default_value=None",
        "variable_name='CURRENCY_CONVERSION_VARS' line_number=271 context='    \\n    # load JSON env vars\\n>>>     currency_vars = json.loads(os.environ[\"CURRENCY_CONVERSION_VARS\"])\\n    currency_dict = json.loads(os.environ[\"CURRENCY_CONVERSION_DICT\"])\\n    marketplace_info = json.loads(os.environ[\"MARKETPLACE_INFO\"])' access_method='os.environ' has_default=False default_value=None",
        "variable_name='CURRENCY_CONVERSION_DICT' line_number=272 context='    # load JSON env vars\\n    currency_vars = json.loads(os.environ[\"CURRENCY_CONVERSION_VARS\"])\\n>>>     currency_dict = json.loads(os.environ[\"CURRENCY_CONVERSION_DICT\"])\\n    marketplace_info = json.loads(os.environ[\"MARKETPLACE_INFO\"])\\n    ' access_method='os.environ' has_default=False default_value=None",
        "variable_name='MARKETPLACE_INFO' line_number=273 context='    currency_vars = json.loads(os.environ[\"CURRENCY_CONVERSION_VARS\"])\\n    currency_dict = json.loads(os.environ[\"CURRENCY_CONVERSION_DICT\"])\\n>>>     marketplace_info = json.loads(os.environ[\"MARKETPLACE_INFO\"])\\n    \\n    logging.basicConfig(level=logging.INFO)' access_method='os.environ' has_default=False default_value=None"
      ],
      "imports": [
        "module_name='os' import_alias=None line_number=2 is_from_import=False imported_items=[]",
        "module_name='json' import_alias=None line_number=3 is_from_import=False imported_items=[]",
        "module_name='argparse' import_alias=None line_number=4 is_from_import=False imported_items=[]",
        "module_name='pathlib' import_alias=None line_number=5 is_from_import=True imported_items=['Path']",
        "module_name='typing' import_alias=None line_number=6 is_from_import=True imported_items=['Tuple', 'List', 'Dict', 'Any', 'Union', 'Optional']",
        "module_name='pandas' import_alias='pd' line_number=7 is_from_import=False imported_items=[]",
        "module_name='numpy' import_alias='np' line_number=8 is_from_import=False imported_items=[]",
        "module_name='multiprocessing' import_alias=None line_number=9 is_from_import=True imported_items=['Pool', 'cpu_count']",
        "module_name='logging' import_alias=None line_number=10 is_from_import=False imported_items=[]",
        "module_name='sklearn.model_selection' import_alias=None line_number=11 is_from_import=True imported_items=['train_test_split']"
      ],
      "argument_definitions": [
        "argument_name='job_type' line_number=243 is_required=True has_default=False default_value=None argument_type='str' choices=['training', 'validation', 'testing', 'calibration']",
        "argument_name='mode' line_number=250 is_required=False has_default=True default_value='per_split' argument_type='str' choices=['per_split', 'split_after_conversion']",
        "argument_name='train_ratio' line_number=260 is_required=False has_default=True default_value=None argument_type='float' choices=None",
        "argument_name='test_val_ratio' line_number=261 is_required=False has_default=True default_value=None argument_type='float' choices=None",
        "argument_name='n_workers' line_number=262 is_required=False has_default=True default_value=50 argument_type='int' choices=None",
        "argument_name='marketplace_id_col' line_number=263 is_required=True has_default=False default_value=None argument_type=None choices=None",
        "argument_name='currency_col' line_number=264 is_required=False has_default=True default_value=None argument_type=None choices=None",
        "argument_name='default_currency' line_number=265 is_required=False has_default=True default_value='USD' argument_type=None choices=None",
        "argument_name='skip_invalid_currencies' line_number=266 is_required=False has_default=False default_value=None argument_type=None choices=None",
        "argument_name='enable_conversion' line_number=267 is_required=False has_default=True default_value=True argument_type=None choices=None"
      ],
      "file_operations": []
    },
    "contract": {
      "entry_point": "currency_conversion.py",
      "inputs": {
        "data_input": {
          "path": "/opt/ml/processing/input/data"
        }
      },
      "outputs": {
        "converted_data": {
          "path": "/opt/ml/processing/output"
        }
      },
      "arguments": {
        "job-type": {
          "default": "training",
          "required": false
        },
        "mode": {
          "default": "per_split",
          "required": false
        },
        "marketplace-id-col": {
          "default": "marketplace_id",
          "required": false
        },
        "currency-col": {
          "default": "",
          "required": true
        },
        "default-currency": {
          "default": "USD",
          "required": false
        },
        "skip-invalid-currencies": {
          "default": "false",
          "required": false
        },
        "enable-conversion": {
          "default": "true",
          "required": false
        },
        "n-workers": {
          "default": "50",
          "required": false
        }
      },
      "environment_variables": {
        "required": [
          "CURRENCY_CONVERSION_VARS",
          "CURRENCY_CONVERSION_DICT",
          "MARKETPLACE_INFO",
          "LABEL_FIELD"
        ],
        "optional": {
          "TRAIN_RATIO": "0.7",
          "TEST_VAL_RATIO": "0.5"
        }
      },
      "description": "\n    Currency conversion script that:\n    1. Loads processed data from input splits (train/test/val or single split)\n    2. Applies currency conversion to specified monetary variables\n    3. Uses marketplace information to determine currency codes\n    4. Supports parallel processing for performance\n    5. Handles two modes: per-split conversion or conversion before re-splitting\n    \n    Input Structure:\n    - /opt/ml/processing/input/data/{split}/{split}_processed_data.csv: Input data files\n    - /opt/ml/processing/input/data/{split}/{split}_full_data.csv: Optional full data files\n    \n    Output Structure:\n    - /opt/ml/processing/output/{split}/{split}_processed_data.csv: Converted processed data\n    - /opt/ml/processing/output/{split}/{split}_full_data.csv: Converted full data (if exists)\n    \n    Environment Variables:\n    - CURRENCY_CONVERSION_VARS: JSON list of variables requiring currency conversion\n    - CURRENCY_CONVERSION_DICT: JSON dict mapping currency codes to exchange rates\n    - MARKETPLACE_INFO: JSON dict mapping marketplace IDs to currency information\n    - LABEL_FIELD: Name of the label column for stratified splitting\n    - TRAIN_RATIO: Training data ratio (default: 0.7)\n    - TEST_VAL_RATIO: Test/validation split ratio (default: 0.5)\n    \n    Command Line Arguments:\n    - --job-type: Type of job (training, validation, testing, calibration)\n    - --mode: Conversion mode (per_split or split_after_conversion)\n    - --marketplace-id-col: Column containing marketplace IDs\n    - --currency-col: Optional existing currency column\n    - --default-currency: Default currency code (default: USD)\n    - --skip-invalid-currencies: Skip rows with invalid currencies\n    - --enable-conversion: Enable/disable conversion (default: true)\n    - --n-workers: Number of parallel workers (default: 50)\n    ",
      "framework_requirements": {
        "pandas": ">=1.3.0",
        "numpy": ">=1.21.0",
        "scikit-learn": ">=1.0.0"
      }
    }
  },
  "level2": {
    "passed": true,
    "issues": [],
    "contract": {
      "entry_point": "currency_conversion.py",
      "inputs": {
        "data_input": "/opt/ml/processing/input/data"
      },
      "outputs": {
        "converted_data": "/opt/ml/processing/output"
      },
      "arguments": {
        "job-type": "training",
        "mode": "per_split",
        "marketplace-id-col": "marketplace_id",
        "currency-col": "",
        "default-currency": "USD",
        "skip-invalid-currencies": "false",
        "enable-conversion": "true",
        "n-workers": "50"
      },
      "environment_variables": {
        "required": [
          "CURRENCY_CONVERSION_VARS",
          "CURRENCY_CONVERSION_DICT",
          "MARKETPLACE_INFO",
          "LABEL_FIELD"
        ],
        "optional": {
          "TRAIN_RATIO": "0.7",
          "TEST_VAL_RATIO": "0.5"
        }
      },
      "framework_requirements": {
        "pandas": ">=1.3.0",
        "numpy": ">=1.21.0",
        "scikit-learn": ">=1.0.0"
      },
      "description": "\n    Currency conversion script that:\n    1. Loads processed data from input splits (train/test/val or single split)\n    2. Applies currency conversion to specified monetary variables\n    3. Uses marketplace information to determine currency codes\n    4. Supports parallel processing for performance\n    5. Handles two modes: per-split conversion or conversion before re-splitting\n    \n    Input Structure:\n    - /opt/ml/processing/input/data/{split}/{split}_processed_data.csv: Input data files\n    - /opt/ml/processing/input/data/{split}/{split}_full_data.csv: Optional full data files\n    \n    Output Structure:\n    - /opt/ml/processing/output/{split}/{split}_processed_data.csv: Converted processed data\n    - /opt/ml/processing/output/{split}/{split}_full_data.csv: Converted full data (if exists)\n    \n    Environment Variables:\n    - CURRENCY_CONVERSION_VARS: JSON list of variables requiring currency conversion\n    - CURRENCY_CONVERSION_DICT: JSON dict mapping currency codes to exchange rates\n    - MARKETPLACE_INFO: JSON dict mapping marketplace IDs to currency information\n    - LABEL_FIELD: Name of the label column for stratified splitting\n    - TRAIN_RATIO: Training data ratio (default: 0.7)\n    - TEST_VAL_RATIO: Test/validation split ratio (default: 0.5)\n    \n    Command Line Arguments:\n    - --job-type: Type of job (training, validation, testing, calibration)\n    - --mode: Conversion mode (per_split or split_after_conversion)\n    - --marketplace-id-col: Column containing marketplace IDs\n    - --currency-col: Optional existing currency column\n    - --default-currency: Default currency code (default: USD)\n    - --skip-invalid-currencies: Skip rows with invalid currencies\n    - --enable-conversion: Enable/disable conversion (default: true)\n    - --n-workers: Number of parallel workers (default: 50)\n    "
    },
    "specifications": {
      "currency_conversion_training_spec": {
        "step_type": "CurrencyConversion_Training",
        "node_type": "internal",
        "dependencies": [
          {
            "logical_name": "data_input",
            "dependency_type": "processing_output",
            "required": true,
            "compatible_sources": [
              "CradleDataLoading",
              "ProcessingStep",
              "TabularPreprocessing"
            ],
            "data_type": "S3Uri",
            "description": "Processed training data requiring currency conversion"
          }
        ],
        "outputs": [
          {
            "logical_name": "converted_data",
            "output_type": "processing_output",
            "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
            "data_type": "S3Uri",
            "description": "Currency-converted training data with standardized monetary values"
          }
        ]
      },
      "currency_conversion_calibration_spec": {
        "step_type": "CurrencyConversion_Calibration",
        "node_type": "internal",
        "dependencies": [
          {
            "logical_name": "data_input",
            "dependency_type": "processing_output",
            "required": true,
            "compatible_sources": [
              "CradleDataLoading",
              "ProcessingStep",
              "TabularPreprocessing"
            ],
            "data_type": "S3Uri",
            "description": "Processed calibration data requiring currency conversion"
          }
        ],
        "outputs": [
          {
            "logical_name": "converted_data",
            "output_type": "processing_output",
            "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
            "data_type": "S3Uri",
            "description": "Currency-converted calibration data with standardized monetary values"
          }
        ]
      },
      "currency_conversion_validation_spec": {
        "step_type": "CurrencyConversion_Validation",
        "node_type": "internal",
        "dependencies": [
          {
            "logical_name": "data_input",
            "dependency_type": "processing_output",
            "required": true,
            "compatible_sources": [
              "CradleDataLoading",
              "ProcessingStep",
              "TabularPreprocessing"
            ],
            "data_type": "S3Uri",
            "description": "Processed validation data requiring currency conversion"
          }
        ],
        "outputs": [
          {
            "logical_name": "converted_data",
            "output_type": "processing_output",
            "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
            "data_type": "S3Uri",
            "description": "Currency-converted validation data with standardized monetary values"
          }
        ]
      },
      "currency_conversion_testing_spec": {
        "step_type": "CurrencyConversion_Testing",
        "node_type": "internal",
        "dependencies": [
          {
            "logical_name": "data_input",
            "dependency_type": "processing_output",
            "required": true,
            "compatible_sources": [
              "CradleDataLoading",
              "ProcessingStep",
              "TabularPreprocessing"
            ],
            "data_type": "S3Uri",
            "description": "Processed testing data requiring currency conversion"
          }
        ],
        "outputs": [
          {
            "logical_name": "converted_data",
            "output_type": "processing_output",
            "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
            "data_type": "S3Uri",
            "description": "Currency-converted testing data with standardized monetary values"
          }
        ]
      }
    }
  },
  "level3": {
    "passed": false,
    "issues": [
      {
        "severity": "ERROR",
        "category": "dependency_resolution",
        "message": "Cannot resolve pipeline dependency: data_input",
        "details": {
          "logical_name": "data_input",
          "specification": "currency_conversion",
          "pattern": "pipeline"
        },
        "recommendation": "Create a step that produces output data_input or change to external dependency"
      }
    ],
    "specification": {
      "step_type": "CurrencyConversion_Training",
      "node_type": "internal",
      "dependencies": [
        {
          "logical_name": "data_input",
          "dependency_type": "processing_output",
          "required": true,
          "compatible_sources": [
            "CradleDataLoading",
            "ProcessingStep",
            "TabularPreprocessing"
          ],
          "data_type": "S3Uri",
          "description": "Processed training data requiring currency conversion"
        }
      ],
      "outputs": [
        {
          "logical_name": "converted_data",
          "output_type": "processing_output",
          "property_path": "properties.ProcessingOutputConfig.Outputs['converted_data'].S3Output.S3Uri",
          "data_type": "S3Uri",
          "description": "Currency-converted training data with standardized monetary values"
        }
      ]
    }
  },
  "level4": {
    "passed": true,
    "issues": [
      {
        "severity": "WARNING",
        "category": "configuration_fields",
        "message": "Required configuration field not accessed in builder: label_field",
        "details": {
          "field_name": "label_field",
          "builder": "currency_conversion"
        },
        "recommendation": "Access required field label_field in builder or make it optional"
      },
      {
        "severity": "WARNING",
        "category": "configuration_fields",
        "message": "Required configuration field not accessed in builder: currency_conversion_dict",
        "details": {
          "field_name": "currency_conversion_dict",
          "builder": "currency_conversion"
        },
        "recommendation": "Access required field currency_conversion_dict in builder or make it optional"
      },
      {
        "severity": "WARNING",
        "category": "configuration_fields",
        "message": "Required configuration field not accessed in builder: marketplace_id_col",
        "details": {
          "field_name": "marketplace_id_col",
          "builder": "currency_conversion"
        },
        "recommendation": "Access required field marketplace_id_col in builder or make it optional"
      },
      {
        "severity": "WARNING",
        "category": "configuration_fields",
        "message": "Required configuration field not accessed in builder: marketplace_info",
        "details": {
          "field_name": "marketplace_info",
          "builder": "currency_conversion"
        },
        "recommendation": "Access required field marketplace_info in builder or make it optional"
      },
      {
        "severity": "INFO",
        "category": "required_field_validation",
        "message": "Builder has required fields but no explicit validation logic detected",
        "details": {
          "required_fields": [
            "label_field",
            "marketplace_info",
            "marketplace_id_col",
            "currency_conversion_dict"
          ],
          "builder": "currency_conversion"
        },
        "recommendation": "Consider adding explicit validation logic for required configuration fields"
      }
    ],
    "builder_analysis": {
      "config_accesses": [
        {
          "field_name": "job_type",
          "line_number": 67
        }
      ],
      "validation_calls": [],
      "default_assignments": [],
      "class_definitions": [
        {
          "class_name": "CurrencyConversionStepBuilder",
          "line_number": 31
        }
      ],
      "method_definitions": [
        {
          "method_name": "__init__",
          "line_number": 39
        },
        {
          "method_name": "validate_configuration",
          "line_number": 100
        },
        {
          "method_name": "_create_processor",
          "line_number": 130
        },
        {
          "method_name": "_get_environment_variables",
          "line_number": 150
        },
        {
          "method_name": "_get_inputs",
          "line_number": 170
        },
        {
          "method_name": "_get_outputs",
          "line_number": 222
        },
        {
          "method_name": "_get_job_arguments",
          "line_number": 277
        },
        {
          "method_name": "create_step",
          "line_number": 301
        }
      ]
    },
    "config_analysis": {
      "class_name": "CurrencyConversionConfig",
      "fields": {
        "job_type": {
          "type": "<class 'str'>",
          "required": false
        },
        "processing_entry_point": {
          "type": "<class 'str'>",
          "required": false
        },
        "use_large_processing_instance": {
          "type": "<class 'bool'>",
          "required": false
        },
        "mode": {
          "type": "<class 'str'>",
          "required": false
        },
        "train_ratio": {
          "type": "<class 'float'>",
          "required": false
        },
        "test_val_ratio": {
          "type": "<class 'float'>",
          "required": false
        },
        "label_field": {
          "type": "<class 'str'>",
          "required": true
        },
        "marketplace_id_col": {
          "type": "<class 'str'>",
          "required": true
        },
        "currency_col": {
          "type": "typing.Optional[str]",
          "required": false
        },
        "currency_conversion_var_list": {
          "type": "typing.List[str]",
          "required": false
        },
        "currency_conversion_dict": {
          "type": "typing.Dict[str, float]",
          "required": true
        },
        "marketplace_info": {
          "type": "typing.Dict[str, typing.Dict[str, str]]",
          "required": true
        },
        "enable_currency_conversion": {
          "type": "<class 'bool'>",
          "required": false
        },
        "default_currency": {
          "type": "<class 'str'>",
          "required": false
        },
        "skip_invalid_currencies": {
          "type": "<class 'bool'>",
          "required": false
        }
      },
      "required_fields": "{'label_field', 'marketplace_info', 'marketplace_id_col', 'currency_conversion_dict'}",
      "optional_fields": "{'use_large_processing_instance', 'enable_currency_conversion', 'mode', 'currency_conversion_var_list', 'default_currency', 'test_val_ratio', 'currency_col', 'job_type', 'skip_invalid_currencies', 'train_ratio', 'processing_entry_point'}",
      "default_values": {
        "aws_region": "<property object at 0x102975580>",
        "effective_instance_type": "<property object at 0x30eae5850>",
        "effective_source_dir": "<property object at 0x30eae5800>",
        "model_computed_fields": {},
        "model_config": {
          "arbitrary_types_allowed": true,
          "extra": "allow",
          "protected_namespaces": [],
          "validate_assignment": true
        },
        "model_extra": "<property object at 0x1022b3970>",
        "model_fields": {
          "author": "annotation=str required=True description='Author or owner of the pipeline.'",
          "bucket": "annotation=str required=True description='S3 bucket name for pipeline artifacts and data.'",
          "role": "annotation=str required=True description='IAM role for pipeline execution.'",
          "region": "annotation=str required=True description='Custom region code (NA, EU, FE) for internal logic.'",
          "service_name": "annotation=str required=True description='Service name for the pipeline.'",
          "pipeline_version": "annotation=str required=True description='Version string for the SageMaker Pipeline.'",
          "model_class": "annotation=str required=False default='xgboost' description='Model class (e.g., XGBoost, PyTorch).'",
          "current_date": "annotation=str required=False default_factory=<lambda> description='Current date, typically used for versioning or pathing.'",
          "framework_version": "annotation=str required=False default='2.1.0' description='Default framework version (e.g., PyTorch).'",
          "py_version": "annotation=str required=False default='py310' description='Default Python version.'",
          "source_dir": "annotation=Union[str, NoneType] required=False default=None description='Common source directory for scripts if applicable. Can be overridden by step configs.'",
          "processing_instance_count": "annotation=int required=False default=1 description='Instance count for processing jobs' metadata=[Ge(ge=1), Le(le=10)]",
          "processing_volume_size": "annotation=int required=False default=500 description='Volume size for processing jobs in GB' metadata=[Ge(ge=10), Le(le=1000)]",
          "processing_instance_type_large": "annotation=str required=False default='ml.m5.4xlarge' description='Large instance type for processing step.'",
          "processing_instance_type_small": "annotation=str required=False default='ml.m5.2xlarge' description='Small instance type for processing step.'",
          "use_large_processing_instance": "annotation=bool required=False default=False description='Whether to use large instance type.'",
          "processing_source_dir": "annotation=Union[str, NoneType] required=False default=None description='Source directory for processing scripts. Falls back to base source_dir if not provided.'",
          "processing_entry_point": "annotation=str required=False default='currency_conversion.py' description='Entry point script for currency conversion.'",
          "processing_script_arguments": "annotation=Union[List[str], NoneType] required=False default=None description='Optional arguments for the processing script.'",
          "processing_framework_version": "annotation=str required=False default='1.2-1' description=\"Version of the scikit-learn framework to use in SageMaker Processing. Format: '<sklearn-version>-<build-number>'\"",
          "job_type": "annotation=str required=False default='training' description=\"One of ['training','validation','testing','calibration']\"",
          "mode": "annotation=str required=False default='per_split' description=\"One of ['per_split','split_after_conversion']\"",
          "train_ratio": "annotation=float required=False default=0.7 description='Train fraction when split_after_conversion' metadata=[Ge(ge=0.0), Le(le=1.0)]",
          "test_val_ratio": "annotation=float required=False default=0.5 description='Test vs val split within holdout' metadata=[Ge(ge=0.0), Le(le=1.0)]",
          "label_field": "annotation=str required=True description='Label column name for stratified splitting'",
          "marketplace_id_col": "annotation=str required=True description='Column with marketplace IDs'",
          "currency_col": "annotation=Union[str, NoneType] required=False default=None description='Optional column with currency codes; else infer from marketplace_info'",
          "currency_conversion_var_list": "annotation=List[str] required=False default_factory=list description='Which numeric columns to convert'",
          "currency_conversion_dict": "annotation=Dict[str, float] required=True description='Map currency code \u2192 conversion rate'",
          "marketplace_info": "annotation=Dict[str, Dict[str, str]] required=True description=\"Map marketplace ID \u2192 {'currency_code':...}\"",
          "enable_currency_conversion": "annotation=bool required=False default=True description='Turn off conversion if False'",
          "default_currency": "annotation=str required=False default='USD' description='Fallback currency code'",
          "skip_invalid_currencies": "annotation=bool required=False default=False description='If True, fill invalid codes with default_currency'"
        },
        "model_fields_set": "<property object at 0x1022b39c0>",
        "pipeline_description": "<property object at 0x102975620>",
        "pipeline_name": "<property object at 0x1029755d0>",
        "pipeline_s3_loc": "<property object at 0x102975670>",
        "script_contract": "<property object at 0x102975710>",
        "script_path": "<property object at 0x30eae58a0>"
      }
    }
  },
  "overall_status": "FAILING",
  "metadata": {
    "script_path": "/Users/tianpeixie/github_workspace/cursus/src/cursus/steps/scripts/currency_conversion.py",
    "contract_mapping": "currency_conversion_contract",
    "validation_timestamp": "2025-08-10T19:46:35.236971",
    "validator_version": "1.0.0"
  }
}